/*
 * CoinGecko CryptoWatcher
 * CoinGecko API for CryptoWatcher, defines the necessary endpoints for the app to work
 *
 * OpenAPI spec version: 0.0.2
 * Contact: nagygm17@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package com.nagygm.cryptowatcher.model

import com.google.gson.annotations.SerializedName
import java.util.*
import javax.annotation.Generated

/**
 * MarketChart
 */
@Generated(
    value = ["io.swagger.codegen.v3.generators.java.JavaClientCodegen"],
    date = "2020-05-09T13:04:15.904459+02:00[Europe/Budapest]"
)
class MarketChart {
    @SerializedName("prices")
    private var prices: MutableList<List<String>>? =
        null

    @SerializedName("market_caps")
    private var marketCaps: MutableList<List<String>>? =
        null

    @SerializedName("total_volumes")
    private var totalVolumes: MutableList<List<String>>? =
        null

    fun prices(prices: MutableList<List<String>>?): MarketChart {
        this.prices = prices
        return this
    }

    fun addPricesItem(pricesItem: List<String>): MarketChart {
        if (prices == null) {
            prices = ArrayList()
        }
        prices!!.add(pricesItem)
        return this
    }

    /**
     * Get prices
     * @return prices
     */
    fun getPrices(): List<List<String>>? {
        return prices
    }

    fun setPrices(prices: MutableList<List<String>>?) {
        this.prices = prices
    }

    fun marketCaps(marketCaps: MutableList<List<String>>?): MarketChart {
        this.marketCaps = marketCaps
        return this
    }

    fun addMarketCapsItem(marketCapsItem: List<String>): MarketChart {
        if (marketCaps == null) {
            marketCaps = ArrayList()
        }
        marketCaps!!.add(marketCapsItem)
        return this
    }

    /**
     * Get marketCaps
     * @return marketCaps
     */
    fun getMarketCaps(): List<List<String>>? {
        return marketCaps
    }

    fun setMarketCaps(marketCaps: MutableList<List<String>>?) {
        this.marketCaps = marketCaps
    }

    fun totalVolumes(totalVolumes: MutableList<List<String>>?): MarketChart {
        this.totalVolumes = totalVolumes
        return this
    }

    fun addTotalVolumesItem(totalVolumesItem: List<String>): MarketChart {
        if (totalVolumes == null) {
            totalVolumes = ArrayList()
        }
        totalVolumes!!.add(totalVolumesItem)
        return this
    }

    /**
     * Get totalVolumes
     * @return totalVolumes
     */
    fun getTotalVolumes(): List<List<String>>? {
        return totalVolumes
    }

    fun setTotalVolumes(totalVolumes: MutableList<List<String>>?) {
        this.totalVolumes = totalVolumes
    }

    override fun equals(o: Any?): Boolean {
        if (this === o) {
            return true
        }
        if (o == null || javaClass != o.javaClass) {
            return false
        }
        val marketChart = o as MarketChart
        return prices == marketChart.prices &&
                marketCaps == marketChart.marketCaps &&
                totalVolumes == marketChart.totalVolumes
    }

    override fun hashCode(): Int {
        return Objects.hash(prices, marketCaps, totalVolumes)
    }

    override fun toString(): String {
        val sb = StringBuilder()
        sb.append("class MarketChart {\n")
        sb.append("    prices: ").append(toIndentedString(prices)).append("\n")
        sb.append("    marketCaps: ").append(toIndentedString(marketCaps)).append("\n")
        sb.append("    totalVolumes: ").append(toIndentedString(totalVolumes)).append("\n")
        sb.append("}")
        return sb.toString()
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private fun toIndentedString(o: Any?): String {
        return o?.toString()?.replace("\n", "\n    ") ?: "null"
    }
}